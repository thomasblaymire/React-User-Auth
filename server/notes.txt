To Setup
================
npm install --save express mongoose morgan body-parser

To Run
=========
node index.js
npm run dev

Middlewhere
============
Morgan is about logging incoming HTTP requests
BodyParser attempts to parse everything to JSON
Nodemon watches the file directory for any changes (Add a script CLI command for this in package.json)


// Tech Stack
HTTP-Module (Handle HTTP Requests)
BodyParser (Help Parse Incoming HTTP Requests)
Morgan (Logging)
Express (Parse response + routing)

MongoDB (Storing data)
Mongoose (Working with MongoDB)

Bcrypt-Node.js (Storing a users password safely)
Passport JWT (Authenticating users via JWT)
Passport Local (Authenticating users with a username/password)
Passport JS (Authenticating users)

Bcrytpt
============
To allow us to encrypt our passwords so they are not saved as plain text
Create a salt key that is then added to the plain password that created a salt + hashed password. We save this in the DB.
Then when a user wants to authenticate we pull out just the salt and use it to encrypt the submitted password that will produce a hashed password.
Then we compare the hashed password with what was initially stored in the DB.


JWT Simple
=======================
This is the package used to setup our JWT in the first place.

Passport Express
=======================
npm install --save passport passport-jwt.
Passport allows us to check what specific routes need authenticaiton.
There are vairous different passport strategys for example:

Strategy 1: Verify user with a JwtStrategy
Strategy 2: Verify user with a username and password
Strategy 3: Verify Facebook Login

CORS (Cross Origin Resource Sharing)
============
Browser secuirty feature to prevent header manipulation.
No permanent fix for the clinet side apart from temporaty Chrome Plugins.
Fix generally server side to allow connections API.
npm install --save cors
add in the server config require module and add app.use(cors())
